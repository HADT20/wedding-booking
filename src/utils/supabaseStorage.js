// Qu·∫£n l√Ω d·ªØ li·ªáu booking v·ªõi Supabase
import { supabase } from '../lib/supabaseClient';

/**
 * L·∫•y t·∫•t c·∫£ bookings t·ª´ Supabase
 * @returns {Promise<Array>} Danh s√°ch bookings
 */
export const getBookings = async () => {
  // Ki·ªÉm tra k·∫øt n·ªëi Supabase
  if (!supabase) {
    console.error('‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi Supabase! Vui l√≤ng ki·ªÉm tra file .env.local');
    throw new Error('Supabase connection not configured');
  }

  try {
    console.log('üîÑ ƒêang t·∫£i bookings t·ª´ Supabase...');
    const { data, error } = await supabase
      .from('bookings')
      .select('*')
      .order('shooting_date_time', { ascending: true });

    if (error) {
      console.error('‚ùå L·ªói khi l·∫•y bookings:', error);
      throw error;
    }

    console.log(`‚úÖ ƒê√£ t·∫£i ${data.length} bookings t·ª´ Supabase`);

    // Chuy·ªÉn ƒë·ªïi t√™n c·ªôt t·ª´ snake_case sang camelCase
    return data.map(booking => ({
      id: booking.id,
      customerName: booking.customer_name,
      phone: booking.phone,
      address: booking.address,
      shootingDateTime: booking.shooting_date_time,
      price: parseFloat(booking.price) || 0,
      deposit: parseFloat(booking.deposit) || 0,
      notes: booking.notes || '',
      isCompleted: booking.is_completed || false,
      isFullyPaid: booking.is_fully_paid || false,
      createdAt: booking.created_at,
    }));
  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong ƒë·ª£i:', error);
    throw error;
  }
};

/**
 * Th√™m booking m·ªõi v√†o Supabase
 * @param {Object} booking - D·ªØ li·ªáu booking
 * @returns {Promise<Object|null>} Booking m·ªõi ƒë∆∞·ª£c t·∫°o
 */
export const addBooking = async (booking) => {
  // Ki·ªÉm tra k·∫øt n·ªëi Supabase
  if (!supabase) {
    console.error('‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi Supabase!');
    throw new Error('Supabase connection not configured');
  }

  try {
    console.log('‚ûï ƒêang th√™m booking v√†o Supabase...');
    // Chuy·ªÉn ƒë·ªïi t·ª´ camelCase sang snake_case cho database
    const { data, error } = await supabase
      .from('bookings')
      .insert([
        {
          customer_name: booking.customerName,
          phone: booking.phone,
          address: booking.address,
          shooting_date_time: booking.shootingDateTime,
          price: booking.price || 0,
          deposit: booking.deposit || 0,
          notes: booking.notes || '',
          is_completed: false,
          is_fully_paid: false,
        }
      ])
      .select()
      .single();

    if (error) {
      console.error('‚ùå L·ªói khi th√™m booking:', error);
      throw error;
    }

    console.log('‚úÖ ƒê√£ th√™m booking:', data.id);

    // Chuy·ªÉn ƒë·ªïi l·∫°i sang camelCase
    return {
      id: data.id,
      customerName: data.customer_name,
      phone: data.phone,
      address: data.address,
      shootingDateTime: data.shooting_date_time,
      price: parseFloat(data.price) || 0,
      deposit: parseFloat(data.deposit) || 0,
      notes: data.notes || '',
      isCompleted: data.is_completed || false,
      isFullyPaid: data.is_fully_paid || false,
      createdAt: data.created_at,
    };
  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong ƒë·ª£i:', error);
    throw error;
  }
};

/**
 * C·∫≠p nh·∫≠t booking trong Supabase
 * @param {string} id - ID c·ªßa booking
 * @param {Object} updatedData - D·ªØ li·ªáu c·∫ßn c·∫≠p nh·∫≠t
 * @returns {Promise<Object|null>} Booking ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
 */
export const updateBooking = async (id, updatedData) => {
  try {
    // Chuy·ªÉn ƒë·ªïi t·ª´ camelCase sang snake_case
    const updatePayload = {};

    if (updatedData.customerName !== undefined) updatePayload.customer_name = updatedData.customerName;
    if (updatedData.phone !== undefined) updatePayload.phone = updatedData.phone;
    if (updatedData.address !== undefined) updatePayload.address = updatedData.address;
    if (updatedData.shootingDateTime !== undefined) updatePayload.shooting_date_time = updatedData.shootingDateTime;
    if (updatedData.price !== undefined) updatePayload.price = updatedData.price;
    if (updatedData.deposit !== undefined) updatePayload.deposit = updatedData.deposit;
    if (updatedData.notes !== undefined) updatePayload.notes = updatedData.notes;
    if (updatedData.isCompleted !== undefined) updatePayload.is_completed = updatedData.isCompleted;
    if (updatedData.isFullyPaid !== undefined) updatePayload.is_fully_paid = updatedData.isFullyPaid;

    const { data, error } = await supabase
      .from('bookings')
      .update(updatePayload)
      .eq('id', id)
      .select()
      .single();

    if (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t booking:', error);
      return null;
    }

    // Chuy·ªÉn ƒë·ªïi l·∫°i sang camelCase
    return {
      id: data.id,
      customerName: data.customer_name,
      phone: data.phone,
      address: data.address,
      shootingDateTime: data.shooting_date_time,
      price: parseFloat(data.price) || 0,
      deposit: parseFloat(data.deposit) || 0,
      notes: data.notes || '',
      isCompleted: data.is_completed || false,
      isFullyPaid: data.is_fully_paid || false,
      createdAt: data.created_at,
    };
  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong ƒë·ª£i:', error);
    return null;
  }
};

/**
 * X√≥a booking kh·ªèi Supabase
 * @param {string} id - ID c·ªßa booking
 * @returns {Promise<boolean>} True n·∫øu x√≥a th√†nh c√¥ng
 */
export const deleteBooking = async (id) => {
  try {
    const { error } = await supabase
      .from('bookings')
      .delete()
      .eq('id', id);

    if (error) {
      console.error('‚ùå L·ªói khi x√≥a booking:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong ƒë·ª£i:', error);
    return false;
  }
};

